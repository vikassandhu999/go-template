// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: accounts.sql

package model

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    domain, name, email, password
) VALUES (
    $1, $2, $3, $4
) RETURNING id, domain, name, email, password
`

type CreateAccountParams struct {
	Domain   string
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Domain,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, domain, name, email, password FROM accounts
WHERE id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getAccountByDomain = `-- name: GetAccountByDomain :one
SELECT id, domain, name, email, password FROM accounts
WHERE domain = $1
`

func (q *Queries) GetAccountByDomain(ctx context.Context, domain string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByDomain, domain)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET
  name = $2,
  email = $3,
  password = $4
WHERE id = $1
RETURNING id, domain, name, email, password
`

type UpdateAccountParams struct {
	ID       int32
	Name     string
	Email    string
	Password string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}
