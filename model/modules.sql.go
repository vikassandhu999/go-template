// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: modules.sql

package model

import (
	"context"
)

const createModule = `-- name: CreateModule :one
INSERT INTO modules (domain, category, purpose) VALUES($1,$2,$3) RETURNING id, domain, category, purpose, structure
`

type CreateModuleParams struct {
	Domain   string
	Category string
	Purpose  string
}

func (q *Queries) CreateModule(ctx context.Context, arg CreateModuleParams) (Module, error) {
	row := q.db.QueryRow(ctx, createModule, arg.Domain, arg.Category, arg.Purpose)
	var i Module
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Category,
		&i.Purpose,
		&i.Structure,
	)
	return i, err
}

const getModule = `-- name: GetModule :one
SELECT id, domain, category, purpose, structure FROM modules
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetModule(ctx context.Context, id int64) (Module, error) {
	row := q.db.QueryRow(ctx, getModule, id)
	var i Module
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Category,
		&i.Purpose,
		&i.Structure,
	)
	return i, err
}

const listModules = `-- name: ListModules :many
SELECT id, domain, category, purpose, structure FROM modules LIMIT $1 OFFSET $2
`

type ListModulesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListModules(ctx context.Context, arg ListModulesParams) ([]Module, error) {
	rows, err := q.db.Query(ctx, listModules, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Module
	for rows.Next() {
		var i Module
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.Category,
			&i.Purpose,
			&i.Structure,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
